apiVersion: apps/v1
kind: Deployment 
metadata:
  name: orthanc
  namespace: orthweb
  labels:
    app: orth
spec:
  replicas: 3 
  selector:
    matchLabels:
      app: orth
  template:
    metadata:
      labels:
        app: orth 
    spec:
      volumes:
      - name: cmvol
        configMap:
          name: orthanc-app
          defaultMode: 0755
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: orthanc
        image: osimis/orthanc@sha256:20413096878fb56bf8d09af08cf4055993dbcf507526f0561b26fc4d0ed7affc #22.12.2 
        imagePullPolicy: Always
        args: ["/run/secrets/"]
        securityContext:
          capabilities:
            drop:
              - ALL
          allowPrivilegeEscalation: false
        ports:
          - containerPort: 8042
          - containerPort: 4242
        env:
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: postgres-ha-postgresql-ha-postgresql 
                key: password
          - name: DB_USERNAME
            valueFrom:
              configMapKeyRef:
                name: orthanc-app 
                key: db.user 
          - name: DB_ADDR
            valueFrom:
              configMapKeyRef:
                name: orthanc-app
                key: db.addr
          - name: DB_PORT
            valueFrom:
              configMapKeyRef:
                name: orthanc-app
                key: db.port
        volumeMounts:
        - name: cmvol 
          mountPath: "/run/secrets/orthanc.json"
          subPath: "orthanc.json"
          readOnly: true
#        - name: secvol
#          mountPath: "/run/secrets/tls.crt"
#          subPath: "tls.crt"
#          readOnly: true
#        - name: secvol
#          mountPath: "/run/secrets/tls.key"
#          subPath: "tls.key"
#          readOnly: true
#        lifecycle:
#          postStart:
#            exec:
#              command: ['/bin/sh','-c',' cat /run/secrets/tls.key /run/secrets/tls.crt > /run/secrets/tls.pem']
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /app/explorer.html
            port: 8042
            scheme: HTTP
            httpHeaders:
              - name: Authorization
                value: Basic YWRtaW46b3J0aGFuYw== 
          initialDelaySeconds: 10
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 2
        livenessProbe:
          failureThreshold: 2
          httpGet:
            path: /app/explorer.html
            port: 8042
            scheme: HTTP
            httpHeaders:
              - name: Authorization
                value: Basic YWRtaW46b3J0aGFuYw== 
          initialDelaySeconds: 60
          periodSeconds: 120
          successThreshold: 1
          timeoutSeconds: 2
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
      automountServiceAccountToken: false
---
apiVersion: v1
kind: Service
metadata:
  namespace: orthweb
  name: orthweb
  labels:
    service: orthweb
spec:
  type: ClusterIP
  selector:
    app: orth
  ports:
    - name: dicom
      protocol: TCP
      port: 4242
      targetPort: 4242
    - name: http
      protocol: TCP
      port: 8042
      targetPort: 8042
---
## gateway and virtual service for web and dicom traffic

apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: web-gw
  namespace: orthweb
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 443
      name: https
      protocol: HTTPS  
    hosts:
    - "web.orthweb.com"
    tls:
      mode: SIMPLE
      credentialName: orthweb-secret # secret in the same namespace as the istio-ingressgateway resource
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: web-vs
  namespace: orthweb
spec:
  hosts:
  - "web.orthweb.com"
  gateways:
  - web-gw
  http:
#  - match:
#    - uri: 
#        prefix: /app
  - route:
    - destination:
        host: orthweb # service label 
        port: 
          number: 8042
---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: dcm-gw
  namespace: orthweb
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 11112 
      name: dicom
      protocol: TLS  
    hosts:
    - "*"      # ingress expects incoming request to have SNI extension matching a host. If DICOM client does not support SNI extension at TLS layer, do not set host here.
    tls:
      mode: SIMPLE
      credentialName: orthweb-secret # secret in the same namespace as the istio-ingressgateway resource
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: dcm-vs
  namespace: orthweb
spec:
  hosts:
  - "dicom.orthweb.com"
  gateways:
  - dcm-gw
  tcp:
  - match:
    - port: 11112 
    route:
    - destination:
        host: orthweb # service label
        port: 
          number: 4242
